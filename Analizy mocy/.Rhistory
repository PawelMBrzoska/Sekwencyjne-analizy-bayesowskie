library(BFDA)
sim.H0f <- BFDA.sim(expected.ES=0, type="t.between",
prior=list("Cauchy", list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary=6, B=10000,
verbose=TRUE, cores=10, stepsize = 20)
sim.H0f <- BFDA.sim(expected.ES=0, type="t.between",
prior=list("Cauchy", list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary=6, B=10000,
verbose=TRUE, cores=10, stepsize = 20)
sim.H1f <- BFDA.sim(expected.ES=0.2, type="t.between",
prior=list("Cauchy",list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary= 6, B=10000,
verbose=TRUE, cores=10, stepsize = 20)
sim.H0fb <- BFDA.sim(expected.ES=0, type="t.between",
prior=list("Cauchy", list(prior.location=0.2, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary=6, B=10000,
verbose=TRUE, cores=10, stepsize = 20)
plot(sim.H0f, n.min=200, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
BFDA.analyze(sim.H0f, design="sequential", n.min=200, n.max=1000, boundary=c(1/6, 6))
BFDA.analyze(sim.H0fb, design="sequential", n.min=200, n.max=1000, boundary=c(1/6, 6))
plot(sim.H0b, n.min=200, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
plot(sim.H0fb, n.min=200, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
plot(sim.H1f, n.min=240, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
BFDA.analyze(sim.H1f, design="sequential", n.min=240, n.max=1000, boundary=c(1/6, 6))
View(sim.H0fb)
View(sim.H0fb)
View(sim.H0fb)
View(sim.H0fb)
library(BFDA)
BFDA.analyze(sim.H1f, design="sequential", n.min=240, n.max=1000, boundary=c(1/6, 6))
BFDA.analyze(sim.H0f, design="sequential", n.min=200, n.max=1000, boundary=c(1/6, 6))
plot(sim.H1f, n.min=240, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
plot(sim.H0f, n.min=200, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
plot(sim.H1f, n.min=240, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
View(sim.H0fb)
View(sim.H0fb)
Effect.00 <- BFDA.sim(expected.ES=0, type="t.between",
prior=list("Cauchy", list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary=6, B=1000,
verbose=TRUE, cores=10, stepsize = 20)
library(BFDA)
Effect.00 <- BFDA.sim(expected.ES=0, type="t.between",
prior=list("Cauchy", list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary=6, B=1000,
verbose=TRUE, cores=10, stepsize = 20)
gc()
library(BFDA)
Effect.00 <- BFDA.sim(expected.ES=0.00, type="t.between",
prior=list("Cauchy", list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary=12, B=1000,
verbose=TRUE, cores=10, stepsize = 10)
Effect.20 <- BFDA.sim(expected.ES=0.20, type="t.between",
prior=list("Cauchy",list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary= 12, B=1000,
verbose=TRUE, cores=10, stepsize = 10)
Effect.30 <- BFDA.sim(expected.ES=0.30, type="t.between",
prior=list("Cauchy",list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary= 12, B=1000,
verbose=TRUE, cores=10, stepsize = 10)
Effect.50 <- BFDA.sim(expected.ES=0.50, type="t.between",
prior=list("Cauchy",list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=100, n.max=1000, design="sequential",  alternative="greater", boundary= 12, B=1000,
verbose=TRUE, cores=10, stepsize = 10)
BFDA.analyze(Effect.00, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
plot(Effect.00, n.min=100, n.max = 1000, boundary=c(1/12, 12), n.trajectories = 100)
BFDA.analyze(Effect.30, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
plot(Effect.30, n.min=100, n.max = 1000, boundary=c(1/12, 12), n.trajectories = 100)
BFDA.analyze(Effect.50, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
plot(Effect.50, n.min=100, n.max = 1000, boundary=c(1/12, 12), n.trajectories = 100)
BFDA.analyze(Effect.00, design="sequential", n.min=100, n.max=1000, boundary=c(1/6, 6))
plot(Effect.00, n.min=100, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
BFDA.analyze(Effect.00, design="sequential", n.min=100, n.max=1000, boundary=c(1/6, 6))
plot(Effect.00, n.min=500, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
BFDA.analyze(Effect.20, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
plot(Effect.20, n.min=100, n.max = 1000, boundary=c(1/12, 12), n.trajectories = 100)
BFDA.analyze(Effect.20, design="sequential", n.min=100, n.max=1000, boundary=c(1/6, 6))
plot(Effect.20, n.min=100, n.max = 1000, boundary=c(1/6, 6), n.trajectories = 100)
library(BFDA)
BFDA.analyze(Effect.20, design="sequential", n.min=100, n.max=1000, boundary=c(1/6, 6))
BFDA.analyze(Effect.00, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
library(BFDA)
BFDA.analyze(Effect.00, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
BFDA.analyze(Effect.50, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
BFDA.analyze(Effect.50, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
source("C:/Users/pawel/Dropbox/Badania/Konferencje/2023.06.10-11 Psychozzjum 5/Warsztat/Analizy mocy/Power_analysis.R", echo=TRUE)
BFDA.analyze(Effect.50, design="sequential", n.min=100, n.max=350, boundary=c(1/12, 12))
BFDA.analyze(Effect.00, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
BFDA.analyze(Effect.30, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
BFDA.analyze(Effect.50, design="sequential", n.min=100, n.max=350, boundary=c(1/12, 12))
BFDA.analyze(Effect.00, design="sequential", n.min=100, n.max=1000, boundary=c(1/6, 6))
BFDA.analyze(Effect.00, design="sequential", n.min=100, n.max=1000, boundary=c(1/6, 6))
BFDA.analyze(Effect.20, design="sequential", n.min=100, n.max=1000, boundary=c(1/12, 12))
BFDA.analyze(Effect.20, design="sequential", n.min=100, n.max=1000, boundary=c(1/6, 6))
